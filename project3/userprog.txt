		     +--------------------------+
       	       	     |		EE461S		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+
---- GROUP ----
>> Fill in the names and email addresses of your group members.
Amy Reed, amy_hindman@yahoo.com
Carmina Francia carmina_francia32@yahoo.com

---- PRELIMINARIES ----
Professor noted the multi-oom test was extra credit, this should be working
in our assignment.

			   ARGUMENT PASSING
			   ================
---- DATA STRUCTURES ----
>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

process.c:

The following two structures were created in class to keep the child
process command and arguments.
typedef struct{
  char *name;
  int len;
}args_t;

typedef  struct  {
  int argc;
  args_t args[100];
} child_t;

---- ALGORITHMS ----
>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
Argument passing was implemented in class and we used the professors
code. Two structs were created to hold the command and null terminated strings.
The child struct which contains the command and arguments are passed into
the create_thread function.  Here the command and arguments are retreived and
placed onto the stack starting with the last argument placed at the bottom, thus 
the top of the stack will contain the command, followed by the necessary arguments.

---- RATIONALE ----
>> A3: Why does Pintos implement strtok_r() but not strtok()?
strtok_r() is rentrant therefore execution could be interrupted and
then restarted and it should keep correct behavior. It can be called by multiple
threads and perform correctly.

			     SYSTEM CALLS
			     ============
---- DATA STRUCTURES ----
>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

thread.h:
The following structure is part of a list containing all data for managing all child
processes containing items like id, necessary synchronization elements, and pointer
to actual thread struct.
is created, includes the ID
struct child_process {
   struct list_elem elem;
   int pid;
   int exit_code;
   bool exit;
   bool wait;
   struct thread *process;
   char *file_name;
   struct semaphore sema;
};
List element for file descriptor table.  The actual file descriptor table is 
maintained in the thread struct.
struct opened_file {
   struct list_elem elem;
   int fd;
   struct file* file;
};

thread.c
Global file system lock
struct lock fs_lock; 

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
A file descriptor in our program is unique only to a process.  It has
a relationship to the actual file pointer returned when a file is opened
and used by the file system calls.

---- ALGORITHMS ----
>> B3: Describe your code for reading and writing user data from the
>> kernel.
>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.


---- SYNCHRONIZATION ----
>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
We use a semaphore for synchronization between the parent and child. The
parent lets the child process proceed via a semaphore once it has 
obtained the thread ID, and then the parent uses a semaphore to wait for 
all of the thread/process setup occurs and can proceed right before the
assembly call to actually kick off the new process.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?


---- RATIONALE ----
>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?


			   SURVEY QUESTIONS
			   ================
Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.
>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
Had we been required to complete the setup stack/child arguments portion of
the assignment without help. This would have been very challenging so having 
the assistance with this portion was very reasonable. The assignment in the way
it was set up and given was very reasonable for the time we had, and was 
consistent with other homeworks.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Working with the filesystem calls, file descriptor table, and examining
the filesystem implementation gave a great deal of insight into OS design.
The exec/wait implementation also gave good insight into the OS functions
we made use of earlier in the course.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
I would continue to do the in class portions for setting up the stack,
showing how to execute a test, and run the debugger with gcc.  

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
>> Any other comments?
The level of guidance form the professor and TA were appropriate to make
the assignment educational but still challenging.
